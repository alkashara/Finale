- name: Setup PostgreSQL on localhost
  hosts: localhost
  become: true

  vars:
    db_user: "{{ db_user }}"
    db_password: "{{ db_password }}"
    db_name: "{{ db_name }}"
    db_host: "{{ db_host }}"
    db_port: "{{ db_port | int }}"
    pg_hba_conf: "/etc/postgresql/14/main/pg_hba.conf"
    postgresql_conf: "/etc/postgresql/14/main/postgresql.conf"
    init_sql_path: "./init.sql"  # Relative path to init.sql
    repo_url: "https://github.com/alkashara/PT_START2024.git"
    repo_version: "bot"
    bot_directory: "/opt/tg_bot"
    bot_token: "{{ bot_token }}"  # Use bot_token from extra vars

  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Check if TOKEN is defined
      fail:
        msg: "The TOKEN environment variable is not set."
      when: bot_token == ""

  tasks:
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present

    - name: Ensure PostgreSQL is started
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Install pip
      apt:
        name: python3-pip
        state: present

    - name: Install psycopg2-binary dependencies
      apt:
        name: libpq-dev
        state: present

    - name: Install virtualenv
      pip:
        name: virtualenv
        state: present

    - name: Allow md5 password authentication for all users
      lineinfile:
        path: "{{ pg_hba_conf }}"
        regexp: '^#?local\s+all\s+all\s+peer$'
        line: 'local   all             all                                     md5'

    - name: Allow peer authentication for postgres user
      lineinfile:
        path: "{{ pg_hba_conf }}"
        insertafter: '^local\s+all\s+all\s+md5$'
        line: 'local   all             postgres                                peer'

    - name: Allow remote connections in pg_hba.conf
      lineinfile:
        path: "{{ pg_hba_conf }}"
        regexp: '^#?host\s+all\s+all\s+127.0.0.1/32\s+md5$'
        line: 'host    all             all             0.0.0.0/0               md5'

    - name: Ensure PostgreSQL is listening on all interfaces
      lineinfile:
        path: "{{ postgresql_conf }}"
        regexp: "^#listen_addresses = 'localhost'"
        line: "listen_addresses = '*'"
        state: present

    - name: Restart PostgreSQL to apply authentication changes
      service:
        name: postgresql
        state: restarted

    - name: Create PostgreSQL user
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present
        login_user: postgres
        login_unix_socket: "/var/run/postgresql"
        port: "{{ db_port }}"
        db: postgres

    - name: Create PostgreSQL database
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"  # Ensure this matches the expected database name
        owner: "{{ db_user }}"
        state: present
        login_user: postgres
        login_unix_socket: "/var/run/postgresql"
        port: "{{ db_port }}"
        db: postgres

    - name: Create .env file for the bot
      copy:
        dest: "{{ bot_directory }}/bot/.env"
        content: |
          DB_USER={{ db_user }}
          DB_PASSWORD={{ db_password }}
          DB_DATABASE={{ db_name }}  # Use DB_DATABASE to match bot.py
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          TOKEN={{ bot_token }}

    - name: Verify .env file contents
      command: cat {{ bot_directory }}/bot/.env
      register: env_file_contents

    - name: Show .env file contents
      debug:
        var: env_file_contents.stdout_lines

    - name: Run init.sql
      command: >
        psql -U {{ db_user }} -d {{ db_name }} -f {{ init_sql_path }}
      args:
        chdir: "{{ playbook_dir }}"  # Ensure the command runs in the playbook directory
      environment:
        PGPASSWORD: "{{ db_password }}"
      become_user: postgres

    - name: Install git
      apt:
        name: git
        state: present

    - name: Clone the bot repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ bot_directory }}"
        version: "{{ repo_version }}"
        force: yes

    - name: Create virtual environment
      command: python3 -m venv {{ bot_directory }}/venv
      args:
        creates: "{{ bot_directory }}/venv"

    - name: Install Python dependencies
      pip:
        requirements: "{{ bot_directory }}/bot/requirements.txt"
        virtualenv: "{{ bot_directory }}/venv"

    - name: Install python-dotenv
      pip:
        name: python-dotenv
        virtualenv: "{{ bot_directory }}/venv"

    - name: Print environment variables for debugging
      shell: |
        source {{ bot_directory }}/venv/bin/activate
        set -a
        . {{ bot_directory }}/bot/.env
        set +a
        env | grep DB_
      register: env_vars

    - name: Show environment variables
      debug:
        var: env_vars.stdout_lines

    - name: Run the bot.py script
      command: >
        bash -c 'source {{ bot_directory }}/venv/bin/activate && set -a && . {{ bot_directory }}/bot/.env && set +a && python {{ bot_directory }}/bot/bot.py'
      args:
        chdir: "{{ bot_directory }}/bot"
