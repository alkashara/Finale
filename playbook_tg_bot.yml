- hosts: db_host
  vars_files:
    - ./vars.yml
  tasks:
    - name: Install PostgreSQL
      become: yes
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        state: latest

    - name: Start PostgreSQL
      become: yes
      service:
        name: postgresql
        state: started

    - name: Allow remote auth
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "all"
        users: "all"
        address: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Allow replication connections on primary
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "replication"
        users: "replicator"
        address: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Allow peer authentication for local connections on primary
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "local"
        databases: "all"
        users: "all"
        method: "peer"
        create: true

    - name: Set postgresql.conf parameters for replication
      become: yes
      become_user: postgres
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#?(listen_addresses|wal_level|max_wal_senders|max_replication_slots|archive_mode|archive_command)'
        line: "{{ item.key }} = '{{ item.value }}'"
      with_dict:
        listen_addresses: '*'
        wal_level: 'replica'
        max_wal_senders: '10'
        max_replication_slots: '10'
        archive_mode: 'on'
        archive_command: 'cp %p /var/lib/postgresql/14/main/archive/%f'

    - name: Set log parameters in postgresql.conf
      become: yes
      become_user: postgres
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#?(logging_collector|log_directory|log_filename|log_statement)'
        line: "{{ item.key }} = '{{ item.value }}'"
      with_dict:
        logging_collector: 'on'
        log_directory: '/tmp'
        log_filename: 'pg.log'
        log_statement: 'all'

    - name: Create log directory for PostgreSQL
      become: yes
      file:
        path: /tmp
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Restart PostgreSQL on primary to apply configuration changes
      become: yes
      service:
        name: postgresql
        state: restarted

    - name: Create replication user
      become: yes
      become_user: postgres
      postgresql_user:
        name: replicator
        password: "{{ DB_PASSWORD }}"
        role_attr_flags: "REPLICATION"
        state: present
      environment:
        PGUSER: postgres
        PGPASSWORD: "{{ DB_PASSWORD }}"

    - name: Create database
      become: yes
      become_user: postgres
      postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: present
      environment:
        PGUSER: postgres
        PGPASSWORD: "{{ DB_PASSWORD }}"

    - name: Restart PostgreSQL on primary after creating database
      become: yes
      service:
        name: postgresql
        state: restarted

    - name: Copy init.sql to DB_HOST
      become: yes
      copy:
        src: "init.sql"
        dest: "/tmp/init.sql"

    - name: Execute init.sql
      become: yes
      become_user: postgres
      command: psql -d "{{ DB_DATABASE }}" -f /tmp/init.sql
      environment:
        PGPASSWORD: "{{ DB_PASSWORD }}"

    - name: Restart PostgreSQL on primary after executing init.sql
      become: yes
      service:
        name: postgresql
        state: restarted

- hosts: db_repl_host
  vars_files:
    - vars.yml
  tasks:
    - name: Install PostgreSQL
      become: yes
      apt:
        pkg:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
        state: latest

    - name: Start PostgreSQL
      become: yes
      service:
        name: postgresql
        state: started

    - name: Clear replication directory
      become: yes
      file:
        state: absent
        path: /var/lib/postgresql/14/main

    - name: Allow replication connections on replica
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "host"
        databases: "replication"
        users: "replicator"
        address: "0.0.0.0/0"
        method: "md5"
        create: true

    - name: Allow peer authentication for local connections on replica
      become: yes
      become_user: postgres
      postgresql_pg_hba:
        dest: /etc/postgresql/14/main/pg_hba.conf
        contype: "local"
        databases: "all"
        users: "all"
        method: "peer"
        create: true

    - name: Create log directory for PostgreSQL
      become: yes
      file:
        path: /tmp
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Set postgresql.conf parameters for hot standby
      become: yes
      become_user: postgres
      lineinfile:
        path: /etc/postgresql/14/main/postgresql.conf
        regexp: '^#?(hot_standby|logging_collector|log_directory|log_filename|log_statement|primary_conninfo)'
        line: "{{ item.key }} = '{{ item.value }}'"
      with_dict:
        hot_standby: 'on'
        logging_collector: 'on'
        log_directory: '/tmp'
        log_filename: 'pg.log'
        log_statement: 'all'
        primary_conninfo: 'host={{ DB_HOST }} port=5432 user=replicator password={{ DB_PASSWORD }} sslmode=require application_name=my_replica keepalives_idle=60 keepalives_interval=10 keepalives_count=5'

    - name: Ensure PostgreSQL has write permissions on the log directory
      become: yes
      command: chown -R postgres:postgres /tmp

    - name: Check PostgreSQL config changes
      become: yes
      shell: cat /etc/postgresql/14/main/postgresql.conf | grep -E 'hot_standby|logging_collector|log_directory|log_filename|log_statement|primary_conninfo'
      register: pg_config_output

    - name: Restart PostgreSQL on replica to apply configuration changes
      become: yes
      service:
        name: postgresql
        state: restarted

    - name: Start replication process
      become: yes
      become_user: postgres
      environment:
        PGUSER: replicator
        PGPASSWORD: "{{ DB_PASSWORD }}"
      shell: pg_basebackup --pgdata=/var/lib/postgresql/14/main -R --slot=replication_slot --host="{{ DB_HOST }}" --port=5432

    - name: Restart PostgreSQL on replica after starting replication
      become: yes
      service:
        name: postgresql
        state: restarted

    - name: Display log files
      debug:
        var: log_files.stdout_lines

- hosts: bot_host
  tasks:
    - name: Install Git & pip3
      become: yes
      apt:
        pkg:
          - python3-pip
          - git
          - libpq-dev

    - name: Create project directory
      become: yes
      file:
        path: /home/ansible/bot/
        state: directory

    - name: Clone repo
      become: yes
      git:
        repo: "https://github.com/alkashara/PT_START2024/"
        dest: "/home/ansible/bot/"

    - name: Install Python modules
      become: yes
      pip:
        requirements: "/home/ansible/bot/bot/requirements.txt"

    - name: Copy .env file to BOT_HOST
      become: yes
      copy:
        src: ".env"
        dest: "/home/ansible/bot/bot/.env"

    - name: Start bot.py
      become: yes
      shell: python3 /home/ansible/bot/bot/bot.py
